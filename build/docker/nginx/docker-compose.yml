# docker network create --driver=bridge --subnet=172.21.0.0/16 --gateway=172.21.0.1 https-proxy
# docker run -d --restart=always --name=dnsmasq --network=https-proxy --cap-add=NET_ADMIN -p 127.0.0.53:53:53/tcp -p 127.0.0.53:53:53/udp -p 127.0.0.1:53:53/tcp -p 127.0.0.1:53:53/udp -p 192.168.68.171:53:53/tcp -p 192.168.68.171:53:53/udp andyshinn/dnsmasq:2.78 --address=/mio/192.168.68.178 --server=192.168.68.207 --server=192.168.68.206
# MYIP=`ipconfig getifaddr en0` \
# docker run -d --restart=always --name=dnsmasq --network=https-proxy --cap-add=NET_ADMIN -p 127.0.0.53:53:53/tcp -p 127.0.0.53:53:53/udp -p 127.0.0.1:53:53/tcp -p 127.0.0.1:53:53/udp -p $MYIP:53:53/tcp -p 192.168.68.171:53:53/udp andyshinn/dnsmasq:2.78 --address=/mio/$MYIP --server=8.8.8.8 --server=8.8.4.4
version: "3.7"

networks:
    default:
        driver: bridge
    front-proxy:
        external: true
        name: https-proxy

volumes:
    #    # named volume with host mounted directory
    #    # this is for Native Linux (Ubuntu)
    #    # PROJECT_FOLDER must be an absolute path 
    #    appVolume:
    #        driver: local
    #        driver_opts:
    #            type: none
    #            device: ${PROJECT_FOLDER}
    #            o: bind

    # this is for MacOS
    #
    # correct absolute folder on MacOS for project folder:
    #    /System/Volumes/Data/$PWD/${PROJECT_FOLDER}
    #  ~ /System/Volumes/Data/Users/vantt/sub/path-to-project/${PROJECT_FOLDER}" 
    #    
    #    where $PWD ~ Users/vantt/sub/path-to-project
    demoProductVolume:
        driver: local
        driver_opts:
            type: nfs
            o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
            device: ":/System/Volumes/Data/$PWD/${PROJECT_FOLDER}" 

services:
    php:
        #build: http://git.c
        image: registry.miczone.asia/devops/phpfpm:7.4
        volumes:
            - demoProductVolume:/app
        networks:
            default: {}

    nginx:
        #build: http://git.c
        image: registry.miczone.asia/devops/nginx:1.19.3
        ports:
            - 8080:8080 # dont need to expose here since traefik will do forwarding
        depends_on:
            - php
        volumes:
            - ./nginx-vhost.conf:/etc/nginx/conf.d/localhost.conf
            - demoProductVolume:/app
        networks:
            front-proxy: {}     # road runner will communicate with the world (expose) through this network
            default: {}   # it will communicate with other internal services here
        labels:
            # https://docs.traefik.io/reference/dynamic-configuration/docker/
            # https://docs.traefik.io/routing/providers/docker/
            - traefik.enable=true # expose this container through traefik
            - traefik.http.services.demoProduct.loadbalancer.server.port=8080

            # http route, redirect to https
            # - traefik.http.routers.demoProduct_http.entrypoints=http
            # - traefik.http.routers.demoProduct_http.rule=Host(`demo.dev.mz`)
            # - traefik.http.routers.demoProduct_http.middlewares=force-https@file

            # https route
            - traefik.http.routers.demoProduct_https.entrypoints=https
            - traefik.http.routers.demoProduct_https.rule=Host(`demo.dev.mz`)
            - traefik.http.routers.demoProduct_https.tls=true
            - traefik.http.routers.demoProduct_https.service=demoProduct